name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

env:
  REGISTRY: registry.digitalocean.com
  REGISTRY_NAME: ${{ secrets.DO_REGISTRY_NAME }}
  IMAGE_NAME_FRONTEND: quiz-master-frontend
  IMAGE_NAME_BACKEND: quiz-master-backend

jobs:
  # Tests et Quality Checks
  test:
    runs-on: ubuntu-latest
    name: 🧪 Tests & Quality

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run linter
        run: npm run lint
        # continue-on-error: true

      - name: 🧪 Run type check
        run: npm run type-check

      - name: 🏗️ Test build
        run: npm run build

  # Build et Push des images Docker
  build:
    needs: test
    runs-on: ubuntu-latest
    name: 🏗️ Build & Push Images
    if: github.ref == 'refs/heads/main'

    outputs:
      frontend-image: ${{ steps.extract-tags.outputs.frontend-latest }}
      backend-image: ${{ steps.extract-tags.outputs.backend-latest }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_PAT }}

      - name: 🔐 Login to Digital Ocean Container Registry
        run: doctl registry login

      - name: 🏷️ Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏷️ Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}

      - name: 🔨 Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

      - name: 🏷️ Extract latest tags
        id: extract-tags
        run: |
          # Extraire le tag latest pour frontend
          FRONTEND_LATEST=$(echo "${{ steps.meta-frontend.outputs.tags }}" | grep ":latest" | head -1)
          echo "frontend-latest=$FRONTEND_LATEST" >> $GITHUB_OUTPUT

          # Extraire le tag latest pour backend
          BACKEND_LATEST=$(echo "${{ steps.meta-backend.outputs.tags }}" | grep ":latest" | head -1)
          echo "backend-latest=$BACKEND_LATEST" >> $GITHUB_OUTPUT

          echo "Frontend latest: $FRONTEND_LATEST"
          echo "Backend latest: $BACKEND_LATEST"

  # Déploiement avec Ansible
  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Digital Ocean
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Debug build outputs
        run: |
          echo "=== Build Job Outputs ==="
          echo "Frontend image: '${{ needs.build.outputs.frontend-image }}'"
          echo "Backend image: '${{ needs.build.outputs.backend-image }}'"
          echo "=========================="

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Ansible
        run: |
          pip install ansible docker

      - name: 📦 Install Ansible collections
        run: |
          ansible-galaxy collection install community.docker

      - name: 🔐 Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Clé SSH pour le serveur frontend
          echo "${{ secrets.FRONTEND_SSH_PRIVATE_KEY }}" > ~/.ssh/frontend_key
          chmod 600 ~/.ssh/frontend_key

          # Clé SSH pour le serveur backend
          echo "${{ secrets.BACKEND_SSH_PRIVATE_KEY }}" > ~/.ssh/backend_key
          chmod 600 ~/.ssh/backend_key

          # Configuration SSH spécifique pour chaque serveur
          cat > ~/.ssh/config << EOF
          Host frontend-server
            HostName ${{ secrets.FRONTEND_SERVER_IP }}
            User root
            IdentityFile ~/.ssh/frontend_key
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null

          Host backend-server
            HostName ${{ secrets.BACKEND_SERVER_IP }}
            User root
            IdentityFile ~/.ssh/backend_key
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF

      - name: 🔍 Test SSH connectivity
        run: |
          echo "Testing SSH connectivity..."
          ssh -o ConnectTimeout=10 frontend-server "echo 'Frontend server connected successfully'"
          ssh -o ConnectTimeout=10 backend-server "echo 'Backend server connected successfully'"

      - name: 🔐 Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_PAT }}

      - name: 🔐 Login to Digital Ocean Container Registry
        run: doctl registry login

      - name: 🔍 Test Digital Ocean token
        run: |
          echo "Testing Digital Ocean token..."
          doctl account get || echo "❌ Token test failed"
          doctl registry list || echo "❌ Registry access failed"

      - name: 🔍 Debug environment variables
        run: |
          echo "=== Debug Info ==="
          echo "REGISTRY: $REGISTRY"
          echo "REGISTRY_NAME: $REGISTRY_NAME"
          echo "FRONTEND_IMAGE: $FRONTEND_IMAGE"
          echo "BACKEND_IMAGE: $BACKEND_IMAGE"
          echo "DO_PAT: [HIDDEN]"
          echo "=================="
        env:
          REGISTRY: ${{ env.REGISTRY }}
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}
          FRONTEND_IMAGE: ${{ needs.build.outputs.frontend-image }}
          BACKEND_IMAGE: ${{ needs.build.outputs.backend-image }}
          DO_PAT: ${{ secrets.DO_PAT }}

      - name: 🚀 Deploy with Ansible
        run: |
          cd ansible
          ansible-playbook -i inventory/production.yml deploy.yml -v
        env:
          REGISTRY: ${{ env.REGISTRY }}
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}
          FRONTEND_IMAGE: ${{ needs.build.outputs.frontend-image }}
          BACKEND_IMAGE: ${{ needs.build.outputs.backend-image }}
          DO_PAT: ${{ secrets.DO_PAT }}
          FRONTEND_SERVER_IP: ${{ secrets.FRONTEND_SERVER_IP }}
          BACKEND_SERVER_IP: ${{ secrets.BACKEND_SERVER_IP }}
