---
- name: 🚀 Deploy Quiz Master Application
  hosts: quiz_master
  become: yes
  gather_facts: yes

  vars:
    # Variables par défaut (peuvent être surchargées par --extra-vars)
    app_registry: "{{ registry | default('registry.digitalocean.com') }}"
    app_registry_name: "{{ registry_name | default('') }}"
    app_frontend_image: "{{ frontend_image | default('') }}"
    app_backend_image: "{{ backend_image | default('') }}"
    app_do_pat: "{{ do_pat | default('') }}"

    # Configuration des serveurs
    frontend_server_ip: "{{ lookup('env', 'FRONTEND_SERVER_IP') }}"
    backend_server_ip: "{{ lookup('env', 'BACKEND_SERVER_IP') }}"

  pre_tasks:
    - name: 📋 Display deployment info
      debug:
        msg: |
          Deploying Quiz Master:
          - Frontend Image: {{ app_frontend_image }}
          - Backend Image: {{ app_backend_image }}
          - Registry: {{ app_registry }}/{{ app_registry_name }}
          - Target: {{ inventory_hostname }}
          - Type: {{ server_type }}
          - Current Image: {{ app_frontend_image if server_type == 'frontend' else app_backend_image }}

    - name: ❌ Fail if required variables are missing
      fail:
        msg: "Missing required variables: {{ missing_vars | join(', ') }}"
      vars:
        missing_vars: >-
          {{
            ([
              'registry' if app_registry == '' else '',
              'registry_name' if app_registry_name == '' else '',
              'frontend_image' if app_frontend_image == '' and server_type == 'frontend' else '',
              'backend_image' if app_backend_image == '' and server_type == 'backend' else '',
              'do_pat' if app_do_pat == '' else ''
            ] | select) | list
          }}
      when: missing_vars | length > 0

  tasks:
    - name: 🔐 Install doctl
      get_url:
        url: "https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz"
        dest: "/tmp/doctl.tar.gz"
        mode: "0644"

    - name: 🔐 Extract doctl
      unarchive:
        src: "/tmp/doctl.tar.gz"
        dest: "/usr/local/bin"
        remote_src: yes
        owner: root
        group: root
        mode: "0755"

    - name: 🔐 Create temporary token file
      copy:
        content: "{{ app_do_pat }}"
        dest: "/tmp/do_token"
        mode: "0600"
        owner: root
        group: root
      no_log: true
      register: token_file_created

    - name: 🔐 Initialize doctl authentication
      shell: cat /tmp/do_token | /usr/local/bin/doctl auth init --access-token -
      no_log: true

    - name: 🔍 Verify doctl authentication
      shell: /usr/local/bin/doctl account get
      register: account_info

    - name: 🔐 Login to Digital Ocean Container Registry
      shell: /usr/local/bin/doctl registry login
      register: registry_login_result

    - name: 🗑️ Remove temporary token file
      file:
        path: "/tmp/do_token"
        state: absent

    - name: 📊 Display registry login result
      debug:
        var: registry_login_result.stdout_lines

    - name: 🛑 Stop existing containers
      community.docker.docker_compose_v2:
        project_src: "{{ app_directory }}"
        state: absent
      ignore_errors: yes

    - name: 📁 Ensure app directory exists
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0755"

    - name: 📄 Generate docker-compose.yml for frontend
      template:
        src: docker-compose.frontend.yml.j2
        dest: "{{ app_directory }}/docker-compose.yml"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0644"
      when: server_type == 'frontend'

    - name: 📄 Generate docker-compose.yml for backend
      template:
        src: docker-compose.backend.yml.j2
        dest: "{{ app_directory }}/docker-compose.yml"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0644"
      when: server_type == 'backend'

    - name: 🎯 Pull latest images
      docker_image:
        name: "{{ app_frontend_image if server_type == 'frontend' else app_backend_image }}"
        source: pull
        force_source: yes
      when: (server_type == 'frontend' and app_frontend_image != '') or (server_type == 'backend' and app_backend_image != '')

    - name: 💾 Backup current deployment info
      shell: |
        if [ -f "{{ app_directory }}/docker-compose.yml" ]; then
          cp "{{ app_directory }}/docker-compose.yml" "{{ app_directory }}/docker-compose.yml.backup"
          echo "Backup created"
        else
          echo "No existing deployment to backup"
        fi
      register: backup_result
      ignore_errors: yes

    - name: 🚀 Start application
      community.docker.docker_compose_v2:
        project_src: "{{ app_directory }}"
        state: present
        pull: "always"
        recreate: "always"
      register: docker_result
      failed_when: false

    - name: 📊 Display deployment result
      debug:
        var: docker_result

    - name: ⏰ Wait for application to be ready
      wait_for:
        port: "{{ frontend_port if server_type == 'frontend' else backend_port }}"
        delay: 10
        timeout: 300
      register: port_check
      failed_when: false

    - name: 🔍 Verify application health
      uri:
        url: "http://localhost:{{ frontend_port if server_type == 'frontend' else backend_port }}{{ '/api/health' if server_type == 'backend' else '' }}"
        method: GET
        status_code: 200
      register: health_check
      retries: 5
      delay: 10
      failed_when: false

    - name: 🔄 Rollback on deployment failure
      block:
        - name: 🛑 Stop failed deployment
          community.docker.docker_compose_v2:
            project_src: "{{ app_directory }}"
            state: absent
          ignore_errors: yes

        - name: 🔄 Restore previous deployment
          copy:
            src: "{{ app_directory }}/docker-compose.yml.backup"
            dest: "{{ app_directory }}/docker-compose.yml"
            remote_src: yes
          when: backup_result.stdout is defined and "Backup created" in backup_result.stdout

        - name: 🚀 Start previous deployment
          community.docker.docker_compose_v2:
            project_src: "{{ app_directory }}"
            state: present
          when: backup_result.stdout is defined and "Backup created" in backup_result.stdout
          ignore_errors: yes

        - name: ❌ Deployment failed
          fail:
            msg: |
              Deployment failed and rollback attempted.
              Docker result: {{ docker_result.msg | default('Unknown error') }}
              Port check: {{ 'Failed' if port_check.failed else 'Success' }}
              Health check: {{ 'Failed' if health_check.failed else 'Success' }}
      when: docker_result.failed or port_check.failed or health_check.failed

    - name: ✅ Deployment successful
      debug:
        msg: "✅ {{ server_type.title() }} deployed successfully!"
      when: not (docker_result.failed or port_check.failed or health_check.failed)

  post_tasks:
    - name: 🧹 Clean up unused images
      docker_prune:
        images: yes
        images_filters:
          dangling: false
          until: "24h"

    - name: 📊 Show container status
      docker_container_info:
        name: "{{ app_name }}-{{ server_type }}"
      register: container_info

    - name: 📋 Display container info
      debug:
        msg: |
          Container Status:
          - Name: {{ container_info.container.Name }}
          - Status: {{ container_info.container.State.Status }}
          - Health: {{ container_info.container.State.Health.Status | default('N/A') }}
          - Ports: {{ container_info.container.NetworkSettings.Ports }}
      when: container_info.exists
