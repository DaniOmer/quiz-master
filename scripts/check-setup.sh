#!/bin/bash

# Script de v√©rification de la configuration CI/CD
# V√©rifie que tous les fichiers n√©cessaires sont pr√©sents et configur√©s

set -e

# Configuration des couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úÖ]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚ùå]${NC} $1"
}

print_title() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

# Variables
ERRORS=0
WARNINGS=0

# Fonction pour incr√©menter les erreurs
add_error() {
    print_error "$1"
    ERRORS=$((ERRORS + 1))
}

# Fonction pour incr√©menter les warnings
add_warning() {
    print_warning "$1"
    WARNINGS=$((WARNINGS + 1))
}

# V√©rification des fichiers essentiels
check_files() {
    print_title "V√©rification des fichiers essentiels"
    
    local files=(
        ".github/workflows/ci-cd.yml"
        "ansible/inventory/production.yml"
        "ansible/deploy.yml"
        "ansible/setup.yml"
        "ansible/ansible.cfg"
        "ansible/group_vars/all.yml"
        "ansible/templates/docker-compose.frontend.yml.j2"
        "ansible/templates/docker-compose.backend.yml.j2"
        "ansible/templates/nginx.conf.j2"
        "Dockerfile.frontend"
        "Dockerfile.backend"
        "scripts/deploy-manual.sh"
        "Makefile"
    )
    
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            print_success "Fichier pr√©sent: $file"
        else
            add_error "Fichier manquant: $file"
        fi
    done
}

# V√©rification de la configuration Docker
check_docker() {
    print_title "V√©rification Docker"
    
    if command -v docker &> /dev/null; then
        print_success "Docker est install√©"
        if docker info &> /dev/null; then
            print_success "Docker daemon fonctionne"
        else
            add_warning "Docker daemon ne r√©pond pas"
        fi
    else
        add_error "Docker n'est pas install√©"
    fi
    
    # V√©rifier doctl
    if command -v doctl &> /dev/null; then
        print_success "doctl est install√©"
        local version=$(doctl version 2>/dev/null | grep -oE 'doctl version [0-9]+\.[0-9]+\.[0-9]+' || echo "version inconnue")
        print_status "Version: $version"
    else
        add_error "doctl n'est pas install√© (requis pour Digital Ocean Container Registry)"
    fi
}

# V√©rification des variables d'environnement
check_env_vars() {
    print_title "V√©rification des variables d'environnement"
    
    local required_vars=(
        "FRONTEND_SERVER_IP"
        "BACKEND_SERVER_IP"
        "DO_PAT"
        "DO_REGISTRY_NAME"
    )
    
    for var in "${required_vars[@]}"; do
        if [ -n "${!var}" ]; then
            print_success "Variable d√©finie: $var"
        else
            add_warning "Variable non d√©finie: $var (n√©cessaire pour le d√©ploiement manuel)"
        fi
    done
}

# V√©rification de la configuration Ansible
check_ansible() {
    print_title "V√©rification Ansible"
    
    if command -v ansible &> /dev/null; then
        print_success "Ansible est install√©"
        local version=$(ansible --version | head -n1)
        print_status "Version: $version"
    else
        add_warning "Ansible n'est pas install√© (sera install√© automatiquement si n√©cessaire)"
    fi
    
    # V√©rifier la configuration
    if [ -f "ansible/ansible.cfg" ]; then
        print_success "Configuration Ansible pr√©sente"
    else
        add_error "Fichier ansible.cfg manquant"
    fi
}

# V√©rification de la cl√© SSH
check_ssh() {
    print_title "V√©rification SSH"
    
    if [ -f "$HOME/.ssh/id_rsa" ]; then
        print_success "Cl√© SSH priv√©e trouv√©e"
    else
        add_warning "Cl√© SSH priv√©e non trouv√©e dans ~/.ssh/id_rsa"
    fi
    
    if [ -f "$HOME/.ssh/id_rsa.pub" ]; then
        print_success "Cl√© SSH publique trouv√©e"
    else
        add_warning "Cl√© SSH publique non trouv√©e dans ~/.ssh/id_rsa.pub"
    fi
}

# V√©rification de la configuration GitHub Actions
check_github_actions() {
    print_title "V√©rification GitHub Actions"
    
    local workflow_file=".github/workflows/ci-cd.yml"
    if [ -f "$workflow_file" ]; then
        print_success "Workflow GitHub Actions configur√©"
        
        # V√©rifier les secrets n√©cessaires dans le fichier
        if grep -q "SSH_PRIVATE_KEY" "$workflow_file"; then
            print_success "Secret SSH_PRIVATE_KEY r√©f√©renc√©"
        else
            add_error "Secret SSH_PRIVATE_KEY non r√©f√©renc√©"
        fi
    else
        add_error "Workflow GitHub Actions manquant"
    fi
}

# V√©rification de la structure Ansible
check_ansible_structure() {
    print_title "V√©rification de la structure Ansible"
    
    # V√©rifier l'inventaire
    local inventory_file="ansible/inventory/production.yml"
    if [ -f "$inventory_file" ]; then
        if grep -q "frontend-server" "$inventory_file" && grep -q "backend-server" "$inventory_file"; then
            print_success "Inventaire Ansible configur√© avec frontend et backend"
        else
            add_error "Inventaire Ansible mal configur√©"
        fi
    fi
    
    # V√©rifier les templates
    local templates_dir="ansible/templates"
    if [ -d "$templates_dir" ]; then
        local template_count=$(ls -1 "$templates_dir"/*.j2 2>/dev/null | wc -l)
        print_success "Templates Ansible: $template_count fichiers"
    else
        add_error "Dossier templates Ansible manquant"
    fi
}

# V√©rification des ports
check_ports() {
    print_title "V√©rification des ports disponibles"
    
    local ports=(3000 8003)
    for port in "${ports[@]}"; do
        if lsof -i :$port &> /dev/null; then
            add_warning "Port $port est d√©j√† utilis√©"
        else
            print_success "Port $port disponible"
        fi
    done
}

# R√©capitulatif
print_summary() {
    print_title "R√©capitulatif"
    
    echo -e "\nüìä R√©sultats de la v√©rification:"
    if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
        echo -e "${GREEN}üéâ Parfait ! Tout est configur√© correctement.${NC}"
        echo -e "${GREEN}‚úÖ Pr√™t pour le d√©ploiement !${NC}"
        return 0
    else
        if [ $ERRORS -gt 0 ]; then
            echo -e "${RED}‚ùå $ERRORS erreur(s) critique(s) trouv√©e(s)${NC}"
        fi
        if [ $WARNINGS -gt 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è $WARNINGS avertissement(s)${NC}"
        fi
        
        echo -e "\nüîß Actions recommand√©es:"
        if [ $ERRORS -gt 0 ]; then
            echo -e "${RED}1. Corriger les erreurs critiques avant le d√©ploiement${NC}"
        fi
        if [ $WARNINGS -gt 0 ]; then
            echo -e "${YELLOW}2. V√©rifier les avertissements pour une configuration optimale${NC}"
        fi
        
        return 1
    fi
}

# Fonction principale
main() {
    echo -e "${BLUE}üîç V√©rification de la configuration CI/CD Quiz Master${NC}"
    echo -e "${BLUE}=================================================${NC}"
    
    check_files
    check_docker
    check_env_vars
    check_ansible
    check_ssh
    check_github_actions
    check_ansible_structure
    check_ports
    
    print_summary
}

# Ex√©cuter la v√©rification
main "$@" 